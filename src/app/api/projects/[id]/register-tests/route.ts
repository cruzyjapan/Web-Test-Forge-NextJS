import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/db/prisma";

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id: projectId } = await params;
    console.log("Project ID:", projectId);
    
    let body;
    try {
      body = await request.json();
    } catch (e) {
      console.error("Failed to parse request body:", e);
      return NextResponse.json(
        { error: "Invalid request body" },
        { status: 400 }
      );
    }
    
    const { analysisResult, language = 'ja' } = body;
    
    if (!analysisResult) {
      return NextResponse.json(
        { error: "Analysis result is required" },
        { status: 400 }
      );
    }

    // プロジェクトを取得
    const project = await prisma.project.findUnique({
      where: { id: projectId },
    });

    if (!project) {
      return NextResponse.json(
        { error: "プロジェクトが見つかりません" },
        { status: 404 }
      );
    }

    console.log(`Registering test cases for project: ${project.name}`);
    console.log(`Pages: ${analysisResult.pages?.length || 0}`);
    console.log(`Forms: ${analysisResult.forms?.length || 0}`);
    console.log(`Routes: ${analysisResult.routes?.length || 0}`);

    // テストスイートを作成
    const suite = await prisma.testSuite.create({
      data: {
        name: language === 'ja' 
          ? `自動生成スイート (${new Date().toLocaleDateString("ja-JP")})`
          : `Auto-Generated Suite (${new Date().toLocaleDateString("en-US")})`,
        description: language === 'ja'
          ? `ソースコード解析から自動生成されたテストスイート`
          : `Test suite auto-generated from source code analysis`,
        projectId,
      },
    });

    const testCases = [];
    let createdCount = 0;
    let testNumber = 1; // テストケース番号

    // ページテストケースを作成
    if (analysisResult.pages && analysisResult.pages.length > 0) {
      console.log(`Creating ${analysisResult.pages.length} page test cases`);
      
      // ページをソート（ホームページを最初に、その他はパス順）
      const sortedPages = [...analysisResult.pages].sort((a, b) => {
        if (a.route === '/') return -1;
        if (b.route === '/') return 1;
        return a.route.localeCompare(b.route);
      });
      
      for (const page of sortedPages) {
        const testCase = {
          name: language === 'ja'
            ? `${testNumber}. ページ表示: ${page.title || page.route}`
            : `${testNumber}. Page Display: ${page.title || page.route}`,
          description: language === 'ja'
            ? `${page.route}ページが正しく表示されることを確認`
            : `Verify that ${page.route} page displays correctly`,
          suiteId: suite.id,
          steps: JSON.stringify([
            {
              action: "navigate",
              value: page.route,
              expectedResult: language === 'ja' ? "ページが表示される" : "Page is displayed",
            },
            {
              action: "wait",
              value: "2000",
              expectedResult: language === 'ja' ? "ページの読み込みを待機" : "Wait for page load",
            },
            {
              action: "assert",
              selector: "body",
              expectedResult: language === 'ja' ? "ページ本体が表示される" : "Page body is displayed",
            },
          ]),
          config: JSON.stringify({
            autoGenerated: true,
            sourceFile: page.file,
            route: page.route,
          }),
        };

        try {
          await prisma.testCase.create({ data: testCase });
          createdCount++;
          testNumber++;
        } catch (error) {
          console.error(`Failed to create test case for page ${page.route}:`, error);
        }
      }
    }

    // フォームテストケースを作成
    if (analysisResult.forms && analysisResult.forms.length > 0) {
      // フォームを名前順にソート
      const sortedForms = [...analysisResult.forms].sort((a, b) => 
        (a.name || '').localeCompare(b.name || '')
      );
      
      for (const form of sortedForms) {
        const steps = [
          {
            action: "navigate",
            value: "/", // フォームのページを推定
            expectedResult: "フォームページが表示される",
          },
        ];

        // フォーム要素ごとにステップを追加
        for (const element of form.elements) {
          if (element.type === "submit") continue;

          if (element.type === "select") {
            steps.push({
              action: "select",
              selector: element.selector || `[name="${element.name}"]`,
              value: "選択肢1",
              expectedResult: `${element.name || "項目"}が選択される`,
            });
          } else if (element.type === "checkbox" || element.type === "radio") {
            steps.push({
              action: "click",
              selector: element.selector || `[name="${element.name}"]`,
              expectedResult: `${element.name || "項目"}がクリックされる`,
            });
          } else {
            steps.push({
              action: "type",
              selector: element.selector || `[name="${element.name}"]`,
              value: generateSampleValue(element),
              expectedResult: `${element.name || "項目"}が入力される`,
            });
          }
        }

        // 送信ボタン
        steps.push({
          action: "click",
          selector: "button[type=\"submit\"]",
          expectedResult: "フォームが送信される",
        });

        const testCase = {
          name: `${testNumber}. フォーム: ${form.name}`,
          description: `${form.name}の入力と送信をテスト`,
          suiteId: suite.id,
          steps: JSON.stringify(steps),
          config: JSON.stringify({
            autoGenerated: true,
            sourceFile: form.file,
            formName: form.name,
            elementCount: form.elements.length,
          }),
        };

        try {
          await prisma.testCase.create({ data: testCase });
          createdCount++;
          testNumber++;
        } catch (error) {
          console.error(`Failed to create test case for form ${form.name}:`, error);
        }
      }
    }

    // APIテストケースを作成（GETエンドポイントのみ）
    if (analysisResult.routes && analysisResult.routes.length > 0) {
      const apiRoutes = analysisResult.routes.filter(
        (r: any) => r.path.startsWith("/api") && r.method.includes("GET")
      );
      
      // APIルートをパス順にソート
      const sortedApiRoutes = [...apiRoutes].sort((a, b) => 
        a.path.localeCompare(b.path)
      );

      for (const route of sortedApiRoutes.slice(0, 10)) {
        const testCase = {
          name: `${testNumber}. API: GET ${route.path}`,
          description: `${route.path}エンドポイントのGETリクエストをテスト`,
          suiteId: suite.id,
          steps: JSON.stringify([
            {
              action: "navigate",
              value: route.path,
              expectedResult: "APIエンドポイントにアクセス",
            },
            {
              action: "assert",
              selector: "body",
              expectedResult: "レスポンスが返される",
            },
          ]),
          config: JSON.stringify({
            autoGenerated: true,
            sourceFile: route.file,
            method: "GET",
            endpoint: route.path,
          }),
        };

        try {
          await prisma.testCase.create({ data: testCase });
          createdCount++;
          testNumber++;
        } catch (error) {
          console.error(`Failed to create test case for API ${route.path}:`, error);
        }
      }
    }

    // ナビゲーションテストケースを作成
    if (analysisResult.navigation && analysisResult.navigation.length > 0) {
      const steps = [
        {
          action: "navigate",
          value: "/",
          expectedResult: "トップページが表示される",
        },
      ];

      for (const link of analysisResult.navigation.slice(0, 5)) {
        steps.push(
          {
            action: "click",
            selector: `a[href="${link}"]`,
            expectedResult: `${link}リンクをクリック`,
          },
          {
            action: "wait",
            value: "1000",
            expectedResult: "ページ遷移を待機",
          },
          {
            action: "assert",
            selector: "body",
            expectedResult: `${link}ページが表示される`,
          }
        );
      }

      const testCase = {
        name: `${testNumber}. ナビゲーションテスト`,
        description: "サイト内のリンク遷移をテスト",
        suiteId: suite.id,
        steps: JSON.stringify(steps),
        config: JSON.stringify({
          autoGenerated: true,
          linkCount: analysisResult.navigation.length,
        }),
      };

      try {
        await prisma.testCase.create({ data: testCase });
        createdCount++;
        testNumber++;
      } catch (error) {
        console.error("Failed to create navigation test case:", error);
      }
    }

    return NextResponse.json({
      suiteId: suite.id,
      suiteName: suite.name,
      totalTestCases: createdCount,
      details: {
        pages: analysisResult.pages?.length || 0,
        forms: analysisResult.forms?.length || 0,
        apis: analysisResult.routes?.filter((r: any) => r.path.startsWith("/api")).length || 0,
        navigation: analysisResult.navigation?.length || 0,
      },
    });
  } catch (error) {
    console.error("Register tests error:", error);
    console.error("Error stack:", error instanceof Error ? error.stack : "No stack");
    
    return NextResponse.json(
      {
        error: "テストケースの登録に失敗しました",
        details: error instanceof Error ? error.message : String(error),
        stack: process.env.NODE_ENV === 'development' ? (error instanceof Error ? error.stack : undefined) : undefined,
      },
      { status: 500 }
    );
  }
}

function generateSampleValue(element: any): string {
  const { type, name } = element;

  if (name) {
    if (name.includes("email")) return "test@example.com";
    if (name.includes("password")) return "Test123!@#";
    if (name.includes("name")) return "テストユーザー";
    if (name.includes("phone")) return "090-1234-5678";
    if (name.includes("url")) return "https://example.com";
    if (name.includes("message") || name.includes("comment")) {
      return "これはテストメッセージです";
    }
  }

  switch (type) {
    case "email": return "test@example.com";
    case "password": return "Test123!@#";
    case "tel": return "090-1234-5678";
    case "url": return "https://example.com";
    case "number": return "100";
    case "date": return "2024-01-01";
    case "textarea": return "テストテキスト";
    default: return "テストデータ";
  }
}