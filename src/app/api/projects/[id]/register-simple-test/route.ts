import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/db/prisma";

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id: projectId } = await params;
    console.log("Simple test registration for project:", projectId);
    
    const body = await request.json();
    const { analysisResult } = body;
    
    // プロジェクトを取得
    const project = await prisma.project.findUnique({
      where: { id: projectId },
    });

    if (!project) {
      return NextResponse.json(
        { error: "プロジェクトが見つかりません" },
        { status: 404 }
      );
    }

    // テストスイートを作成
    const suite = await prisma.testSuite.create({
      data: {
        name: `自動生成 (${new Date().toLocaleTimeString("ja-JP")})`,
        description: "ソースコード解析から生成",
        projectId,
      },
    });

    console.log("Created suite:", suite.id);

    // プロジェクトのベースURLを使用してテストケースを作成
    const baseUrl = project.baseUrl.endsWith('/') 
      ? project.baseUrl.slice(0, -1) 
      : project.baseUrl;
    
    console.log("Using base URL for test creation:", baseUrl);
    
    const testCase = await prisma.testCase.create({
      data: {
        name: "ホームページテスト",
        description: "自動生成されたテスト",
        suiteId: suite.id,
        steps: JSON.stringify([
          {
            action: "navigate",
            value: baseUrl,
            expectedResult: "ページが表示される",
          },
        ]),
        config: JSON.stringify({
          autoGenerated: true,
          timestamp: new Date().toISOString(),
          baseUrl: baseUrl,
        }),
      },
    });

    console.log("Created test case:", testCase.id);
    console.log("Test case steps:", testCase.steps);

    // 解析結果から追加のテストケースを作成
    let createdCount = 1;
    
    if (analysisResult?.pages && Array.isArray(analysisResult.pages)) {
      for (const page of analysisResult.pages.slice(0, 5)) { // 最初の5ページのみ
        try {
          // ルートパスを完全なURLに変換
          const route = page.route || "/";
          const fullUrl = route.startsWith('http') 
            ? route 
            : `${baseUrl}${route.startsWith('/') ? route : '/' + route}`;
          
          await prisma.testCase.create({
            data: {
              name: `ページ: ${page.route || "ホーム"}`,
              description: "ページ表示テスト",
              suiteId: suite.id,
              steps: JSON.stringify([
                {
                  action: "navigate",
                  value: fullUrl,
                  expectedResult: "ページが表示される",
                },
              ]),
              config: JSON.stringify({
                autoGenerated: true,
                route: page.route,
                baseUrl: baseUrl,
                fullUrl: fullUrl,
              }),
            },
          });
          createdCount++;
        } catch (err) {
          console.error("Failed to create test case for page:", err);
        }
      }
    }

    return NextResponse.json({
      success: true,
      suiteId: suite.id,
      suiteName: suite.name,
      totalTestCases: createdCount,
      message: `${createdCount}個のテストケースを登録しました`,
    });
    
  } catch (error) {
    console.error("Simple test registration error:", error);
    
    // より詳細なエラー情報を返す
    if (error instanceof Error) {
      return NextResponse.json(
        {
          error: "テストケースの登録に失敗しました",
          message: error.message,
          name: error.name,
          stack: process.env.NODE_ENV === "development" ? error.stack : undefined,
        },
        { status: 500 }
      );
    }
    
    return NextResponse.json(
      { error: "不明なエラーが発生しました" },
      { status: 500 }
    );
  }
}