import { NextRequest, NextResponse } from "next/server"
import { prisma } from "@/lib/db/prisma"
import { LocalTestGenerator } from "@/lib/ai/local-test-generator"

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id: projectId } = await params
    const body = await request.json()
    const { testType, content, language = 'ja' } = body

    // プロジェクトを取得
    const project = await prisma.project.findUnique({
      where: { id: projectId },
    })

    if (!project) {
      return NextResponse.json(
        { error: "プロジェクトが見つかりません" },
        { status: 404 }
      )
    }

    // テストスイートを作成または取得
    const suiteName = language === 'ja'
      ? `自動生成: ${testType.replace("-tests", "").replace("-", " ").toUpperCase()}`
      : `Auto-Generated: ${testType.replace("-tests", "").replace("-", " ").toUpperCase()}`
    
    let suite = await prisma.testSuite.findFirst({
      where: {
        projectId,
        name: suiteName,
      },
    })

    if (!suite) {
      suite = await prisma.testSuite.create({
        data: {
          name: suiteName,
          description: language === 'ja'
            ? `ソースコード解析から自動生成されたテストスイート (${new Date().toLocaleDateString("ja-JP")})`
            : `Test suite auto-generated from source code analysis (${new Date().toLocaleDateString("en-US")})`,
          projectId,
        },
      })
    }

    // テストケースを生成
    const generator = new LocalTestGenerator()
    const testCases = await generator.generateFromSpec(
      {
        content,
        fileName: `${testType}.md`,
        type: "markdown",
      },
      {
        baseUrl: project.baseUrl,
        projectName: project.name,
        language: language,
      }
    )

    // テストケースを保存
    let importedCount = 0
    for (const testCase of testCases) {
      try {
        await prisma.testCase.create({
          data: {
            name: testCase.name,
            description: testCase.description,
            suiteId: suite.id,
            steps: JSON.stringify(testCase.steps),
            config: JSON.stringify({
              priority: testCase.priority,
              tags: testCase.tags,
              autoGenerated: true,
              generatedAt: new Date().toISOString(),
            }),
          },
        })
        importedCount++
      } catch (error) {
        console.error(`Failed to import test case: ${testCase.name}`, error)
      }
    }

    return NextResponse.json({
      suiteId: suite.id,
      suiteName: suite.name,
      count: importedCount,
      total: testCases.length,
    })
  } catch (error) {
    console.error("Import tests error:", error)
    return NextResponse.json(
      { error: "テストケースのインポートに失敗しました" },
      { status: 500 }
    )
  }
}